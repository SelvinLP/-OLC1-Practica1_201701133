/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package olc1_practica1_201701133;

import Estructuras.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Aragon Perez
 */
public class F_Principal extends javax.swing.JFrame {
    //Variables de Archivo
    public String Ruta;
    int CantidadImagenes;
    //Declaracion de Listas
    ArrayList<Lista_Tokens> L_Tokens;
    ArrayList<Lista_Tokens> L_Tokens_Error;
    ArrayList<Lista_Conjuntos> L_Tokens_Conj;
    ArrayList<Lista_ER> L_Tokens_ER;
    ArrayList<Lista_LexemasE> L_Tokens_Lex;
    public F_Principal() {
        //creamos la Lista de Tokens
        this.L_Tokens = new ArrayList<>();
        this.L_Tokens_Error=new ArrayList<>();
        this.L_Tokens_ER=new ArrayList<>();
        this.L_Tokens_Conj=new ArrayList<>();
        this.L_Tokens_Lex=new ArrayList<>();
        CantidadImagenes=0;
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jTextPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Texto de Entrada", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jScrollPane1.setViewportView(jTextPane1);

        jButton1.setText("Generar Automatas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Analizar Entradas");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 350, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(0, 79, Short.MAX_VALUE))
        );

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Guardar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar Como");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reportes");

        jMenuItem4.setText("Generar Reporte Lexico");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem7.setText("Generar Reporte Errores");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Otros");

        jMenuItem6.setText("Limpiar ");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem5.setText("Salir");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Eventos de Archivo "ABRIR"
        JFileChooser jfileC = new JFileChooser();
        jfileC.setFileFilter(new FileNameExtensionFilter("Todos los archivos *.er", "er", "ER"));
        int abrir = jfileC.showDialog(null, "Abrir");
            if (abrir == JFileChooser.APPROVE_OPTION) {
            FileReader FileR = null;
            BufferedReader BufferR = null;
            try {
                File archivo = jfileC.getSelectedFile();
                String ruta= jfileC.getSelectedFile().getAbsolutePath();
                if (ruta.endsWith(".er") || ruta.endsWith(".ER") || ruta.endsWith(".Er")) {
                    FileR = new FileReader(archivo);
                    BufferR = new BufferedReader(FileR);
                    String linea;
                    String contenido = "";
                    Ruta = ruta;
                    jTextPane1.setText(null);
                    while ((linea = BufferR.readLine()) != null) {
                        contenido += linea + "\n";
                    }
                    jTextPane1.setText(contenido);

                } else {
                    JOptionPane.showMessageDialog(this, "El archivo no se logro Abrir", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(F_Principal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(F_Principal.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
        
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // Evento de otros "SALIR"
        System.exit(0);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Evento de Archivo "GUARDAR"
        if(Ruta != null){
            try {
                FileWriter Filew = new FileWriter(Ruta);
                PrintWriter Printw = new PrintWriter(Filew);
                String[] Texto = jTextPane1.getText().split("\n");
                for(String  e: Texto){
                    Printw.println(e);
                }
                Filew.close();
                JOptionPane.showMessageDialog(null, "Se ha guardado Correctamente");
            }catch(IOException e){}
        }else{
            //En caso de que no Exista ruta
            JFileChooser FileC = new JFileChooser();
            FileC.addChoosableFileFilter(new FileNameExtensionFilter("Todos los archivos *.er", "er", "ER"));
            int Seleccionado = FileC.showSaveDialog(null);
            try{
                if (Seleccionado == JFileChooser.APPROVE_OPTION){
                    File JFile =FileC.getSelectedFile();
                    String PATH = JFile.getAbsolutePath();
                    if(!(PATH.endsWith(".er"))){
                        File temp = new File(PATH+".er");
                        JFile=temp;
                    }
                    PrintWriter printwriter = new PrintWriter(JFile);
                    printwriter.print(jTextPane1.getText());
                    printwriter.close();


                    Ruta=JFile.getAbsolutePath();
                    System.out.print(Ruta);
                    JOptionPane.showMessageDialog(null, "Se ha guardado Correctamente");
                }
            }catch (Exception e){
                JOptionPane.showMessageDialog(null,"Error al Guardar Archivo", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // Evento Archivo "GUARDAR COMO"
        JFileChooser FileC = new JFileChooser();
        FileC.addChoosableFileFilter(new FileNameExtensionFilter("Todos los archivos *.er", "er", "ER"));
        int Seleccionado = FileC.showSaveDialog(null);
        try{
            if (Seleccionado == JFileChooser.APPROVE_OPTION){
                File JFile =FileC.getSelectedFile();
                String PATH = JFile.getAbsolutePath();
                if(!(PATH.endsWith(".er"))){
                    File temp = new File(PATH+".er");
                    JFile=temp;
                }
                PrintWriter printwriter = new PrintWriter(JFile);
                printwriter.print(jTextPane1.getText());
                printwriter.close();

                Ruta=JFile.getAbsolutePath();
                System.out.print(Ruta);
                JOptionPane.showMessageDialog(null, "Se ha guardado Correctamente");
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(null,"Error al Guardar Archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // Evento Otros Limpiar
        jTextPane1.setText("");
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Boton que ejecuta Escaner
        L_Tokens.clear();
        L_Tokens_Error.clear();
        L_Tokens_ER.clear();
        L_Tokens_Conj.clear();
        L_Tokens_Lex.clear();
        CantidadImagenes=0;
        Scanner();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Evento de Expresiones Regulares
        Mini_Parser();
        //Mandamos a Guardar Tokens en el Arbol
        for(int i=0;i<L_Tokens_ER.size();i++){
            Arbol Ab=new Arbol();
            for(int x=0;x<L_Tokens_ER.get(i).getER().size();x++){
                Ab.InsertarArraList((String) L_Tokens_ER.get(i).getER().get(x));
            }
            try {
                //Pedimos Analisar arbol
                Ab.NOMBRE_EXPRESIONREGULAR=L_Tokens_ER.get(i).getNombre();
                Ab.AnalisarArbol();
                Ab.GraficarArbol(CantidadImagenes);
                Ab.GraficarSiguientes(CantidadImagenes);
                Ab.GraicarTablaEstados(CantidadImagenes);
                CantidadImagenes++;
            } catch (IOException ex) {
                Logger.getLogger(F_Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
//        System.out.println("CONJUNTOS");
//        for(int i=0;i<L_Tokens_Conj.size();i++){
//            System.out.println(L_Tokens_Conj.get(i).getNombre()+"    | ---------- |    "+L_Tokens_Conj.get(i).getContenido());
//        }
//        System.out.println("EXPRESIONES REGULARES");
//        for(int i=0;i<L_Tokens_ER.size();i++){
//            System.out.println(L_Tokens_ER.get(i).getNombre()+"    | ---------- |    ");
//            for(int x=0;x<L_Tokens_ER.get(i).getER().size();x++){
//                System.out.print(L_Tokens_ER.get(i).getER().get(x));
//            }
//        }
//        System.out.println("LEXEMAS");
//        for(int i=0;i<L_Tokens_Lex.size();i++){
//            System.out.println(L_Tokens_Lex.get(i).getNombre()+"    | ---------- |    "+L_Tokens_Lex.get(i).getContenido());
//        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        try {
            // Evento generar REPORTE LEXICO
            Graficar_Reporte_Lexico(true);
        } catch (IOException ex) {
            Logger.getLogger(F_Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        try {
            // Evento generar REPORTE LEXICO ERRORES
            Graficar_Reporte_Lexico(false);
        } catch (IOException ex) {
            Logger.getLogger(F_Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F_Principal().setVisible(true);
            }
        });
    }
    //METODOS DE ANALISIS LEXICO DEL ARCHIVO DE ENTRADA
    public void Scanner(){
        char Caracter=' ';
        int Estado=0;
        int Fila=0;
        int Columna=1;
        String Lexema="";
        String Cadena_Archivo=jTextPane1.getText();
        for(int i=0;i<Cadena_Archivo.length();i++){
            Caracter=Cadena_Archivo.charAt(i);
            
            switch(Estado){
                case 0:
                     
                    if(Caracter == (char) 33){
                        L_Tokens.add(new Lista_Tokens(6,Character.toString(Caracter),"Signo de Admiracion",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 34){
                        L_Tokens.add(new Lista_Tokens(7,Character.toString(Caracter),"Comillas Dobles",Fila,Columna));
                        Estado = 7;
                        Columna++;
                    }else if(Caracter == (char) 35){
                        L_Tokens.add(new Lista_Tokens(8,Character.toString(Caracter),"Numeral",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 36){
                        L_Tokens.add(new Lista_Tokens(9,Character.toString(Caracter),"Simbolo Peso",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 37){
                        L_Tokens.add(new Lista_Tokens(10,Character.toString(Caracter),"Porcentaje",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 38){
                        L_Tokens.add(new Lista_Tokens(11,Character.toString(Caracter),"Ampersand",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 39){
                        L_Tokens.add(new Lista_Tokens(12,Character.toString(Caracter),"Comilla Simple",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 40){
                        L_Tokens.add(new Lista_Tokens(13,Character.toString(Caracter),"Parentesis Izquierdo",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 41){
                        L_Tokens.add(new Lista_Tokens(14,Character.toString(Caracter),"Parentesis Derecho",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 42){
                        L_Tokens.add(new Lista_Tokens(15,Character.toString(Caracter),"Asterisco",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 43){
                        L_Tokens.add(new Lista_Tokens(16,Character.toString(Caracter),"Signo Mas",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 44){
                        L_Tokens.add(new Lista_Tokens(17,Character.toString(Caracter),"Coma",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 45){
                        L_Tokens.add(new Lista_Tokens(18,Character.toString(Caracter),"Signo Menos",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 46){
                        L_Tokens.add(new Lista_Tokens(19,Character.toString(Caracter),"Punto",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 47){
                        L_Tokens.add(new Lista_Tokens(20,Character.toString(Caracter),"Barra Inclinada",Fila,Columna));
                        Estado = 3;
                        Columna++;
                    }else if(Caracter == (char) 58){
                        L_Tokens.add(new Lista_Tokens(21,Character.toString(Caracter),"Dos Puntos",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 59){
                        L_Tokens.add(new Lista_Tokens(22,Character.toString(Caracter),"Punto y Coma",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 60){
                        L_Tokens.add(new Lista_Tokens(23,Character.toString(Caracter),"Menor Que",Fila,Columna));
                        Estado = 5;
                        Columna++;
                    }else if(Caracter == (char) 61){
                        L_Tokens.add(new Lista_Tokens(24,Character.toString(Caracter),"Igual Que",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 62){
                        L_Tokens.add(new Lista_Tokens(25,Character.toString(Caracter),"Mayor Que",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 63){
                        L_Tokens.add(new Lista_Tokens(26,Character.toString(Caracter),"Interrogacion",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 64){
                        L_Tokens.add(new Lista_Tokens(27,Character.toString(Caracter),"Arroba",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 91){
                        L_Tokens.add(new Lista_Tokens(28,Character.toString(Caracter),"Corchete Izquierdo",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 92){
                        L_Tokens.add(new Lista_Tokens(29,Character.toString(Caracter),"Barra Invertida",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 93){
                        L_Tokens.add(new Lista_Tokens(30,Character.toString(Caracter),"Corchete Derecho",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 94){
                        L_Tokens.add(new Lista_Tokens(31,Character.toString(Caracter),"Acento Circunflejo",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 95){
                        L_Tokens.add(new Lista_Tokens(32,Character.toString(Caracter),"Barra Baja",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 96){
                        L_Tokens.add(new Lista_Tokens(33,Character.toString(Caracter),"Acento Grave",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 123){
                        L_Tokens.add(new Lista_Tokens(34,Character.toString(Caracter),"Llave Izquierda",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 124){
                        L_Tokens.add(new Lista_Tokens(35,Character.toString(Caracter),"Barra Vetical",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 125){
                        L_Tokens.add(new Lista_Tokens(36,Character.toString(Caracter),"Corchete Derecho",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Caracter == (char) 126){
                        L_Tokens.add(new Lista_Tokens(37,Character.toString(Caracter),"Tilde",Fila,Columna));
                        Estado = 0;
                        Columna++;
                    }else if(Character.isLetter(Caracter)){
                        //Verifica si es Letra
                        Lexema+=Caracter;
                        Estado = 1;
                    }else if(Character.isDigit(Caracter)){
                        //Verifica si es Digito
                        Lexema+=Caracter;
                        Estado = 2;
                    }else if (Caracter == '\n') {
                        //salto de linea
                        Columna = 1;
                        Fila++;
                        Estado = 0;
                    } 
                    else if (Caracter == ' ' | Caracter == '\t' | Caracter == '\b' | Caracter == '\r' | Caracter == '\f') {
                        //Espacios en blanco
                    } else {
                        //Errores Lexicos
                        L_Tokens_Error.add(new Lista_Tokens(0,Character.toString(Caracter),"Error Lexico",Fila,Columna));
                        Lexema = "";
                        Estado = 0;
                    }
                 
                 
                    break;
                case 1:
                    //Verificar si es Letra
                    if (Character.isLetter(Caracter)) {
                        Lexema+=Caracter;
                        Estado = 1;
                    }else if(Character.isDigit(Caracter)){
                        //Verifica si es Digito
                        Lexema += Caracter;
                        Estado = 1;
                    }else if(Caracter == (char) 95){
                        Lexema += Caracter;
                        Estado = 1;
                    }else{
                        
                        if(Lexema.equals("CONJ")){
                           L_Tokens.add(new Lista_Tokens(3,Lexema,"Palabra Reservada",Fila,Columna));
                        }else{
                            L_Tokens.add(new Lista_Tokens(5,Lexema,"Identificador",Fila,Columna));
                        }
                        Columna++;
                        Lexema = "";
                        Estado = 0;
                        i--;
                    }
                    
                    break;
                case 2:
                    //Verifica si es Digito
                    if (Character.isDigit(Caracter)) {
                        Lexema += Caracter;
                        Estado = 2;
                    }else{
                        L_Tokens.add(new Lista_Tokens(38,Lexema,"Digito",Fila,Columna));
                        Columna++;
                        Lexema = "";
                        Estado = 0;
                        i--;
                    }
                    break;
                case 3:
                    //Verifica si es Comentario de una linea
                    if(Caracter == (char) 47){
                        L_Tokens.add(new Lista_Tokens(20,Character.toString(Caracter),"Barra Inclinada",Fila,Columna));
                        Estado = 4;
                        Columna++;
                    }else{
                        Lexema = "";
                        Estado = 0;
                        i--;
                    }
                    break;
                case 4:
                    //Verifica si es Comentario de una linea acepta lo que sea hasta salto de linea
                    if(Caracter != '\n'){
                        Lexema+=Caracter;
                        Estado = 4;
                    }else{
                        L_Tokens.add(new Lista_Tokens(1,Lexema,"Comentario de Linea",Fila,Columna));
                        Columna++;
                        Lexema = "";
                        Estado = 0;
                        i--;
                    }
                    break;
                case 5:
                    //Comentario Multilinea
                    if(Caracter == (char) 33){
                        L_Tokens.add(new Lista_Tokens(6,Character.toString(Caracter),"Signo de Admiracion",Fila,Columna));
                        Estado = 6;
                        Columna++;
                    }else{
                        Lexema = "";
                        Estado = 0;
                        i--;
                    }
                    break;
                case 6:
                    //Comentario Multilinea acepta hasta el signo de admiracion
                    if(Caracter != (char) 33){
                        Lexema+=Caracter;
                        Estado = 6;
                    }else{
                        L_Tokens.add(new Lista_Tokens(2,Lexema,"Comentario Multilinea",Fila,Columna));
                        Columna++;
                        Lexema = "";
                        Estado = 0;
                        i--;
                    }
                    break;
                case 7:
                    //Comentario Multilinea acepta hasta comilla dobles
                    if(Caracter != (char) 34){
                        Lexema+=Caracter;
                        Estado = 7;
                    }else{
                        L_Tokens.add(new Lista_Tokens(4,Lexema,"Lexema de Entrada",Fila,Columna));
                        Columna++;
                        Lexema = "";
                        Estado = 0;
                        //aceptamos las comillas
                        L_Tokens.add(new Lista_Tokens(7,Character.toString(Caracter),"Comillas Dobles",Fila,Columna));
                        Columna++;
                    }
                    break;
                    
            }
            
        }//fin for
    }//fin metodo
    
    //METODO DE GAFICAR
    public void Graficar_Reporte_Lexico(boolean TokensoError) throws IOException{
        String Nombre="";
        if(TokensoError){
            //Son Tokens
            Nombre+="TABLA DE TOKENS";
        }else{
            //Errores
            Nombre+="TABLA DE ERRORES";
        }

        String CadenaImprimir="<html>"+ "<body>"+ "<h1 align='center'>"+Nombre+"</h1></br>"+ "<table cellpadding='10' border = '1' align='center'>"+'\n';

        CadenaImprimir+=" <tr><td><b>No.</b></td><td><b>Id</b></td><td><b>Lexema</b></td><td><b>Descripcion</b></td><td><b>Fila</b></td><td><b>Columna</b></td></tr>"+'\n';
        if(TokensoError){
            for(int i=0;i<L_Tokens.size();i++){
                CadenaImprimir+="<tr><td>"+i+"</td>"+"<td>"+L_Tokens.get(i).getID()+"</td>"+"<td>"+L_Tokens.get(i).getLexema()+"</td>"+"<td>"+L_Tokens.get(i).getDescripcion()+"</td>"+"<td>"+L_Tokens.get(i).getFila()+"</td>"+"<td>"+L_Tokens.get(i).getColumna()+"</td></tr>"+'\n';
            }
        }else{
            for(int i=0;i<L_Tokens_Error.size();i++){
                CadenaImprimir+="<tr><td>"+i+"</td>"+"<td>"+L_Tokens_Error.get(i).getID()+"</td>"+"<td>"+L_Tokens_Error.get(i).getLexema()+"</td>"+"<td>"+L_Tokens_Error.get(i).getDescripcion()+"</td>"+"<td>"+L_Tokens_Error.get(i).getFila()+"</td>"+"<td>"+L_Tokens_Error.get(i).getColumna()+"</td></tr>"+'\n';
            }
        }

        CadenaImprimir+="</table></body></html>";
        
        String ruta = "Reporte_Lexico.html";
        File archivo = new File(ruta);
        try {
            if (!archivo.exists()) {
                archivo.createNewFile();
            }
            FileWriter Fw = new FileWriter(archivo);
            BufferedWriter Bw = new BufferedWriter(Fw);
            Bw.write(CadenaImprimir);
            Bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {

            Runtime.getRuntime().exec("cmd /C Reporte_Lexico.html");  
            
        }catch (IOException ioe) {
            //en caso de error
            System.out.println (ioe);
        }


    }    
    
    //METODO PARA GUARDAR CONJUNTOS,LEXEMAS DE ENTRADA Y EXPRESIONES REGULARES
    public void Mini_Parser(){
        Lista_ER Nuevo=null;
        String Nombre="";
        String Contenido="";
        ArrayList<String> tem = new ArrayList<String>();
        //este boleano sirve para concatenar la expresion regular
        int Estado=0;
        for (int x = 0; x < L_Tokens.size(); x++) {
            switch(Estado){
                //ESTADO 0
                case 0:
                    //Conjuntos
                    if(L_Tokens.get(x).getLexema().equals("CONJ")){
                        if(L_Tokens.get(x+1).getLexema().equals(":")){
                            if(L_Tokens.get(x+2).getDescripcion().equals("Identificador")){
                                //Son conjuntos 
                                Nombre=L_Tokens.get(x+2).getLexema();
                                Estado=1;
                                x=x+4;
                            }
                        }
                    }
                    if(L_Tokens.get(x).getDescripcion().equals("Identificador")){
                        //pasaa estado de expresion regular
                        Nombre=L_Tokens.get(x).getLexema();
                        Estado=2;
                    }
                    break;
                    
                case 1:
                    //ESTADO 1
                    //Concatena los conjuntos
                    if(L_Tokens.get(x).getDescripcion().equals("Identificador")){
                        if(L_Tokens.get(x+1).getDescripcion().equals("Tilde")){
                            Contenido=L_Tokens.get(x).getLexema()+L_Tokens.get(x+1).getLexema()+L_Tokens.get(x+2).getLexema();
                            L_Tokens_Conj.add(new Lista_Conjuntos(Nombre, Contenido));
                            x=x+2;
                            Estado=0;
                        }
                        
                    }
                    if(L_Tokens.get(x).getDescripcion().equals("Digito")){
                        if(L_Tokens.get(x+1).getDescripcion().equals("Tilde")){
                            Contenido=L_Tokens.get(x).getLexema()+L_Tokens.get(x+1).getLexema()+L_Tokens.get(x+2).getLexema();
                            L_Tokens_Conj.add(new Lista_Conjuntos(Nombre, Contenido));
                            x=x+2;
                            Estado=0;
                        }
                        
                    }
                    for(int i=6;i<=37;i++){
                        if(L_Tokens.get(x).getID()==i){
                            if(L_Tokens.get(x+1).getDescripcion().equals("Tilde")){
                                Contenido=L_Tokens.get(x).getLexema()+L_Tokens.get(x+1).getLexema()+L_Tokens.get(x+2).getLexema();
                                L_Tokens_Conj.add(new Lista_Conjuntos(Nombre, Contenido));
                                x=x+2;
                                Estado=0;
                            }
                            
                        }
                    }
                    //conjunto sin llaves
                    if(L_Tokens.get(x).getLexema().equals(";")){
                        if(L_Tokens.get(x-1).getLexema().equals(",")){
                        }else{
                            L_Tokens_Conj.add(new Lista_Conjuntos(Nombre, Contenido));
                            Estado=0;
                            Contenido="";

                        }
                    }else{
                        Contenido+=L_Tokens.get(x).getLexema();
                    }
                    

                    break;
                case 2:
                    //ESTADO 2
                    if(L_Tokens.get(x).getLexema().equals("-")){
                        if(L_Tokens.get(x+1).getLexema().equals(">")){
                            //se mira que es expresion regular
                            
                            Lista_ER nuevo=new Lista_ER(L_Tokens.get(x-1).getLexema());
                            Nuevo=nuevo;
                            L_Tokens_ER.add(nuevo);
                            x++;
                            Estado=3;
                        }
                    }
                    if(L_Tokens.get(x).getLexema().equals(":")){
                        //se mira que es lexema
                       Estado=4;
                    }
                    break;
                case 3:       
                    //ESTADO 3
                    //Concatenacion de Expresion Regular
                    
                    //System.out.println("---------------------------------"+ L_Tokens.get(x).getLexema());
                    if(L_Tokens.get(x).getDescripcion().equals("Punto")){
                        Nuevo.setER(L_Tokens.get(x).getLexema());
                    }
                    if(L_Tokens.get(x).getDescripcion().equals("Barra Vetical")){
                        Nuevo.setER(L_Tokens.get(x).getLexema());
                    }
                    if(L_Tokens.get(x).getDescripcion().equals("Interrogacion")){
                        Nuevo.setER(L_Tokens.get(x).getLexema());
                    }
                    if(L_Tokens.get(x).getDescripcion().equals("Asterisco")){
                        Nuevo.setER(L_Tokens.get(x).getLexema());
                    }
                    if(L_Tokens.get(x).getDescripcion().equals("Signo Mas")){
                        Nuevo.setER(L_Tokens.get(x).getLexema());
                    }
                    if(L_Tokens.get(x).getDescripcion().equals("Lexema de Entrada")){  
                        String tem1='"'+L_Tokens.get(x).getLexema()+'"';
                        Nuevo.setER(tem1);
                        
                    }
                    if(L_Tokens.get(x).getLexema().equals("{")){  
                        String tem1="";
                        if(L_Tokens.get(x+2).getLexema().equals("}")){
                            tem1=L_Tokens.get(x).getLexema()+L_Tokens.get(x+1).getLexema()+L_Tokens.get(x+2).getLexema();
                            Nuevo.setER(tem1);
                        }
                    }
                    if(L_Tokens.get(x).getLexema().equals(";")){
                        Estado=0;
                    }
                    break;
                case 4:
//                    System.out.println(L_Tokens.get(x).getLexema());
                    Contenido=L_Tokens.get(x+1).getLexema();
                    L_Tokens_Lex.add(new Lista_LexemasE(L_Tokens.get(x-2).getLexema(), Contenido));
                    Estado=0;
                    
                    break;
            }//fin switch
        }//Fin for
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
